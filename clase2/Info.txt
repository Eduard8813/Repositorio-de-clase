Variables:
var: forma antigua, puede redeclararse y tiene alcance de funciÃ³n.

let: moderna, puede reasignarse pero no redeclararse, con alcance de bloque.

const: constante, no puede reasignarse ni redeclararse, tambiÃ©n con alcance de bloque.

Tipos de datos:
Primitivos: string, number, boolean, undefined, null, symbol, bigint

Estructurados: object, array, function

Operadores:
Tipos:
AritmÃ©ticos:
+, -, *, /, %, ** â†’ suma, resta, multiplicaciÃ³n, divisiÃ³n, mÃ³dulo, potencia

LÃ³gicos:
&& (AND), || (OR), ! (NOT) â†’ combinan condiciones booleanas

ğŸ§ª ComparaciÃ³n:
== igual sin tipo

=== igual con tipo (recomendado)

!=, !== â†’ desigualdad

>, <, >=, <= â†’ mayor, menor, etc.

Estructuras de Control:

Â¿QuÃ© son?
Son bloques que permiten tomar decisiones o repetir acciones segÃºn condiciones.

Condicionales:
if / else: ejecutan cÃ³digo segÃºn si una condiciÃ³n es verdadera o falsa.

switch: evalÃºa mÃºltiples casos segÃºn el valor de una variable.

Bucles:
for: repite un bloque un nÃºmero definido de veces.

while: repite mientras una condiciÃ³n sea verdadera.

Funciones y eventos:
DeclaraciÃ³n y uso de funciones
Â¿QuÃ© son?
Las funciones son bloques de cÃ³digo reutilizable que ejecutan una tarea especÃ­fica cuando se invocan.

Funciones flecha (=>)
Â¿QuÃ© son?
Son una forma moderna y concisa de declarar funciones.
No tienen su propio this, lo que las hace ideales para callbacks.

Eventos del DOM
Â¿QuÃ© son?
Son acciones que ocurren en la interfaz (clicks, cambios, teclas, etc.) y
que podemos capturar para ejecutar funciones.

Arrays y objetos:
Â¿QuÃ© es un array?
Es una colecciÃ³n ordenada de elementos, como una lista. Cada elemento tiene una posiciÃ³n (Ã­ndice) 
que comienza en 0.

Objetos literales y acceso a propiedades
Â¿QuÃ© es un objeto?
Es una estructura que agrupa datos relacionados en forma de pares clave-valor.

MÃ©todos Ãºtiles para arrays:
push â†’ agrega al final
pop â†’ elimina el Ãºltimo
filter â†’ filtra segÃºn condiciÃ³n
reduce â†’ reduce a un solo valor

setTimeout y setInterval
Â¿QuÃ© son?
Son funciones nativas que permiten ejecutar cÃ³digo despuÃ©s de un tiempo (setTimeout) o 
de forma repetida cada cierto intervalo (setInterval).

Promesas (Promise)
Â¿QuÃ© son?
Son objetos que representan una operaciÃ³n asincrÃ³nica que puede completarse o fallar en el futuro.

Estados:
pending â†’ en espera
fulfilled â†’ completada con Ã©xito
rejected â†’ fallÃ³

async/await
Â¿QuÃ© son?
Son palabras clave modernas que permiten escribir cÃ³digo asincrÃ³nico de forma mÃ¡s clara y secuencial.

Manejo de errores (try/catch)
Â¿QuÃ© es?
Es una estructura que permite capturar y manejar errores sin que el programa se detenga abruptamente.

Â¿QuÃ© es el consumo de APIs?
Es el proceso de conectarse con servicios externos (como bases de datos, servidores o plataformas)
para obtener o enviar informaciÃ³n. Es la forma en que tu aplicaciÃ³n se comunica con el mundo real.

fetch() para obtener datos
Â¿QuÃ© es?
Es una funciÃ³n nativa de JavaScript que permite hacer peticiones HTTP (GET, POST, etc.) de 
forma asincrÃ³nica.

Mostrar resultados en el DOM
Â¿QuÃ© es el DOM?
Es la estructura del documento HTML que podemos modificar desde JavaScript para mostrar datos dinÃ¡micos.

Validar respuestas y manejar errores
Â¿Por quÃ© es importante?
Porque no todas las respuestas son exitosas. Debemos verificar que la respuesta sea vÃ¡lida y
capturar errores para evitar fallos silenciosos.